Algorithm
1. Initialize the Game:
-Print a welcome message.
-Set the range for the random number (1 to 100).
-Initialize the guess attempt counter.
2. Generate a Random Number:
-Use the generate_random_number(min_num, max_num) function to generate and store a random number between 1 and 100.

3. Guessing Loop:
-Start a loop to allow the user to input guesses until they guess correctly.
-Prompt the user to enter a guess.

4. Check the Guess:
-Use check_guess(random_num, user_guess) to verify if the guess is correct.
-If correct:
 -Print a success message with the number of attempts taken.
 -Break the loop.
-If incorrect:
 -Increment the attempt counter.
 -Provide feedback on whether the guess should be higher or lower.
 -Every two incorrect attempts, provide an additional hint:
  -Select a random hint from a list (even/odd, multiple of 5, or if the square of the number is greater than or less than 1000).

5. Repeat:
-Continue to prompt the user to enter guesses until the correct number is guessed.

Flowchart Overview
The flowchart for this solution will:

Begin with a "Start" node leading to the generation of the random number.
Include a loop that continuously prompts the user for input and checks if the guess matches the random number.
Add decision branches for checking if the guess is correct and addional branches for providing hints after every two failed attempts.
Conclude with a success path showing the number of attempts.